// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`plugin-select: createStateSelector should return same output for dynamic changing state selector keys with same values 1`] = `
Object {
  "height": 60,
  "width": 90,
}
`;

exports[`plugin-select: createStateSelector should return same output for dynamic changing state selector keys with same values 2`] = `
Object {
  "dynamic": 1,
  "height": 60,
  "width": 90,
}
`;

exports[`plugin-select: createStateSelector should return same output for dynamic changing state selector keys with same values 3`] = `
Object {
  "dynamic": 1,
  "height": 60,
  "width": 90,
}
`;

exports[`plugin-select: createStateSelector should return same output for dynamic changing state selector keys with same values 4`] = `
Object {
  "height": 60,
  "width": 90,
}
`;

exports[`plugin-select: createStateSelector should select extra properties from state 1`] = `
Object {
  "height": 60,
  "width": 90,
}
`;

exports[`plugin-select: select should forward ref 1`] = `
<withContext(Component)
  forwardedRef={
    Object {
      "current": null,
    }
  }
  multiplier={0.5}
  props="props"
  settings={
    Object {
      "color": "red",
    }
  }
/>
`;

exports[`plugin-select: select should render component 1`] = `
<h1>
  text
</h1>
`;

exports[`plugin-select: select should render component with extraProps 1`] = `
<withContext(Component)
  multiplier={0.5}
  props="props"
  settings={
    Object {
      "color": "red",
    }
  }
>
  <SelectState
    $context={
      Object {
        "$Utils": Object {
          "$Dispatcher": Mock {},
          "$PageStateManager": Mock {
            "getState": [Function],
          },
        },
      }
    }
    multiplier={0.5}
    props="props"
    settings={
      Object {
        "color": "red",
      }
    }
  >
    <Component
      $context={
        Object {
          "$Utils": Object {
            "$Dispatcher": Mock {},
            "$PageStateManager": Mock {
              "getState": [Function],
            },
          },
        }
      }
      height={60}
      multiplier={0.5}
      props="props"
      settings={
        Object {
          "color": "red",
        }
      }
      width={90}
    >
      <h1>
        text
      </h1>
    </Component>
  </SelectState>
</withContext(Component)>
`;

exports[`plugin-select: select should render component with extraProps and own createStateSelector 1`] = `
<withContext(Component)
  multiplier={0.5}
  props="props"
  settings={
    Object {
      "color": "red",
    }
  }
>
  <SelectState
    $context={
      Object {
        "$Utils": Object {
          "$Dispatcher": Mock {},
          "$PageStateManager": Mock {
            "getState": [Function],
          },
        },
      }
    }
    multiplier={0.5}
    props="props"
    settings={
      Object {
        "color": "red",
      }
    }
  >
    <Component
      $context={
        Object {
          "$Utils": Object {
            "$Dispatcher": Mock {},
            "$PageStateManager": Mock {
              "getState": [Function],
            },
          },
        }
      }
      height={60}
      multiplier={0.5}
      props="props"
      settings={
        Object {
          "color": "red",
        }
      }
      width={90}
    >
      <h1>
        text
      </h1>
    </Component>
  </SelectState>
</withContext(Component)>
`;

exports[`plugin-select: select should render component with extraProps and own static methods 1`] = `
<withContext(Component)
  multiplier={0.5}
  props="props"
  settings={
    Object {
      "color": "red",
    }
  }
>
  <SelectState
    $context={
      Object {
        "$Utils": Object {
          "$Dispatcher": Mock {},
          "$PageStateManager": Mock {
            "getState": [Function],
          },
        },
      }
    }
    multiplier={0.5}
    props="props"
    settings={
      Object {
        "color": "red",
      }
    }
  >
    <Component
      $context={
        Object {
          "$Utils": Object {
            "$Dispatcher": Mock {},
            "$PageStateManager": Mock {
              "getState": [Function],
            },
          },
        }
      }
      height={60}
      multiplier={0.5}
      props="props"
      settings={
        Object {
          "color": "red",
        }
      }
      width={90}
    >
      <h1>
        text
      </h1>
    </Component>
  </SelectState>
</withContext(Component)>
`;

exports[`plugin-select: select should render component with extraProps modifies by ownProps 1`] = `
<withContext(Component)
  multiplier={0.5}
  props="props"
  settings={
    Object {
      "color": "red",
    }
  }
>
  <SelectState
    $context={
      Object {
        "$Utils": Object {
          "$Dispatcher": Mock {},
          "$PageStateManager": Mock {
            "getState": [Function],
          },
        },
      }
    }
    multiplier={0.5}
    props="props"
    settings={
      Object {
        "color": "red",
      }
    }
  >
    <Component
      $context={
        Object {
          "$Utils": Object {
            "$Dispatcher": Mock {},
            "$PageStateManager": Mock {
              "getState": [Function],
            },
          },
        }
      }
      height={30}
      multiplier={0.5}
      props="props"
      settings={
        Object {
          "color": "red",
        }
      }
      width={45}
    >
      <h1>
        text
      </h1>
    </Component>
  </SelectState>
</withContext(Component)>
`;

exports[`plugin-select: select should render component with extraProps replaced by ownProps 1`] = `
<withContext(Component)
  multiplier={0.5}
  props="props"
  settings={
    Object {
      "color": "red",
    }
  }
>
  <SelectState
    $context={
      Object {
        "$Utils": Object {
          "$Dispatcher": Mock {},
          "$PageStateManager": Mock {
            "getState": [Function],
          },
        },
      }
    }
    multiplier={0.5}
    props="props"
    settings={
      Object {
        "color": "red",
      }
    }
  >
    <Component
      $context={
        Object {
          "$Utils": Object {
            "$Dispatcher": Mock {},
            "$PageStateManager": Mock {
              "getState": [Function],
            },
          },
        }
      }
      height={60}
      multiplier={0.25}
      props="props"
      settings={
        Object {
          "color": "red",
          "newSettingsProp": true,
        }
      }
      width={90}
    >
      <h1>
        text
      </h1>
    </Component>
  </SelectState>
</withContext(Component)>
`;
